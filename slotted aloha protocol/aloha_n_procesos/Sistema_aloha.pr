/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\aloha.ssy,4)*/
system aloha;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\aloha.ssy,1)*/
/*#include 'random.pr'*/

/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\aloha.ssy(1),323(25,40))*/
SIGNAL
tic,
intencion(Boolean),
colision(Boolean),
mensaje,
respuesta(Boolean);
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\aloha.ssy(1),545(25,65))*/
SYNONYM 
MAXRTX Integer = 15,
RANURA Duration = 1,
SEMILLA RandomControl = DefineSeed(5);
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\aloha.ssy(1),548(25,85))*/
SYNONYM
N_nodos integer = external,
PG Real = external;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\aloha.ssy(1),542(75,145))*/
block Sistema_aloha referenced 
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\aloha.ssy(1),557(25,100))*/
/* Definimos sinonimos (constantes) externamente ( =external).
Estos sinonimos seran leidos, bien desde teclado, bien desde
un fichero de sinonimos (.syn). 

Las definiciones externas permitiran cambiar los parametros PG y N_nodos
sin tener que compilar en cada simulacion. */
;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\aloha.ssy,4)*/
endsystem aloha;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Sistema_aloha.sbk,4)*/
block Sistema_aloha;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Sistema_aloha.sbk(1),122(67,119))*/
signalroute /*#E*/ 
clk from Canal to Emisor with 
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Sistema_aloha.sbk(1),123(77,117))*/
tic;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Sistema_aloha.sbk(1),146(105,119))*/
signalroute /*#E*/ 
cln from Canal to Emisor with 
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Sistema_aloha.sbk(1),147(115,117))*/
colision;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Sistema_aloha.sbk(1),131(84,94))*/
signalroute /*#E*/ 
tx from Emisor to Canal with 
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Sistema_aloha.sbk(1),132(95,95))*/
intencion;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Sistema_aloha.sbk(1),206(98,161))*/
signalroute /*#E*/ 
ack from Emisor to Usuario with 
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Sistema_aloha.sbk(1),207(107,162))*/
respuesta;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Sistema_aloha.sbk(1),194(75,145))*/
signalroute /*#E*/ 
msg from Usuario to Emisor with 
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Sistema_aloha.sbk(1),195(87,150))*/
mensaje;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Sistema_aloha.sbk(1),116(45,75))*/
process Canal referenced 
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Sistema_aloha.sbk(1),413(70,25))*/
/* Al comenzar existe un solo proceso Canal.
El proceso Canal creara N_nodos procesos emisores (entre 0 y 100).
Cada proceso emisor creara su correspondiente proceso usuario.

El par (n,m) al lado de cada proceso representan 
el numero minino y maximo de instancias de cada proceso.
Si se omite se crea una unica instancia de ese proceso. */
;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Sistema_aloha.sbk(1),119(65,125))*/
process Emisor(0,100) referenced;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Sistema_aloha.sbk(1),191(75,170))*/
process Usuario(0,100) referenced;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Sistema_aloha.sbk,4)*/
endblock Sistema_aloha;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr,4)*/
process Emisor;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(1),968(5,25))*/
DCL 
user Pid;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1610(145,35))*/
DCL backoff Integer:=0;

/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(1),1592(95,25))*/
/* Declaramos variables PET_<--->  y Tiem_Serv 
para realizar mediciones de G, S, L y Ts.

La variable user es del tipo PID. */

/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(1),1565(100,90))*/
/* Cada Emisor crea su correspondiente 
instancia de proceso Usuario.  */

/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(1),1559(100,105))*/
/* La variable user (del tipo PID) identifica
cada proceso Usuario creado por el proceso emisor.
Offspring es una variable de sistema y contiene 
el PID del ultimo proceso creado.  */

/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(1),1580(105,200))*/
/* Cuando llega un tic, si el emisor no tiene mensajes
que transmitir, envia intencion(false) al proceso 
que lo creo (parent) */
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1532(50,30))*/
state /*#E*/ 
Tx_pendiente 
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1544(100,30))*/
/* Cuando se ha recibido un mensaje
del usuario, y es tu ranura (backoff)  envias una 
señal de intencion al canal */
;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1517(55,50))*/
input /*#E*/ 
tic;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1514(40,70))*/
task {/*#E*/ 
PET_PEN:= PET_PEN + 1;};
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1511(45,90))*/
output /*#E*/ 
intencion(true) to parent 
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1538(100,90))*/
/* Envio mi intencion true al proceso
canal, que es el que me creo (parent) */
;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1469(55,110))*/
nextstate /*#E*/ 
ficticio;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1532(50,30))*/
endstate;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1469(55,110))*/
state /*#E*/ 
ficticio;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1400(45,125))*/
input /*#E*/ 
colision(estado) 
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1550(100,105))*/
/* Todos los procesos emisores tienen 
el mismo padre (el canal). El canal identifica 
a cada proceso emisor por su PID. */
;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1397(55,140))*/
decision /*#E*/ 
estado;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1406(80,140))*/
(true):
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1394(105,150))*/
decision /*#E*/ 
n_rtx =MAXRTX;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1409(87,157))*/
(false):
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1391(65,165))*/
task {/*#E*/ 
PET_REIN := PET_REIN + 1;};
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1388(85,180))*/
join /*#E*/ 
1;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1415(147,150))*/
(true):
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1385(135,165))*/
task {/*#E*/ 
PET_RECH := PET_RECH + 1;
n_rtx :=0;};
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1382(140,190))*/
output /*#E*/ 
respuesta(false) to user 
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1553(60,200))*/
/* Cada proceso usuario es creado por su
correspodiente proceso emisor. La variable 
user (del tipo PID)  le dice al proceso emisor 
cual es el PID de su procesos usuario (user). 
El emisor envia las respuestas a su proceso usuario
 */
;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1379(145,205))*/
nextstate /*#E*/ 
Emisor_vacio;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1394(105,150))*/
enddecision;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1424(42,140))*/
(false):
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1376(5,155))*/
task {/*#E*/ 
PET_CUR := PET_CUR +1;
Tiem_Serv := Tiem_Serv + 1;
n_rtx := 0;};
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1373(10,175))*/
output /*#E*/ 
respuesta(true) to user 
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1553(60,200))*/
/* Cada proceso usuario es creado por su
correspodiente proceso emisor. La variable 
user (del tipo PID)  le dice al proceso emisor 
cual es el PID de su procesos usuario (user). 
El emisor envia las respuestas a su proceso usuario
 */
;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1370(20,195))*/
nextstate /*#E*/ 
Emisor_vacio;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1397(55,140))*/
enddecision;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(2),1469(55,110))*/
endstate;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1187(85,155))*/
state /*#E*/ 
Espera_Ranuras;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1184(90,170))*/
input /*#E*/ 
tic;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1181(80,185))*/
output /*#E*/ 
intencion(false) via tx 
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1178(145,185))*/
/* Mientras se esta en 
espera  se envia
intencion a false */
;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1175(90,200))*/
nextstate /*#E*/ 
ficticio2;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1187(85,155))*/
endstate;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1175(90,200))*/
state /*#E*/ 
ficticio2;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1172(80,215))*/
input /*#E*/ 
colision(estado) 
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1169(145,215))*/
/* Se consumen la señales
de colision del canal */
;
grst0:
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1202(45,120))*/
decision /*#E*/ 
contador = ranuras;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1211(32,127))*/
(true):
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1199(15,135))*/
task {/*#E*/ 
n_rtx := n_rtx + 1;};
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1196(20,155))*/
nextstate /*#E*/ 
Tx_pendiente 
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1502(15,180))*/
/* Cuando llega el turno (mi ranura) 
pasamos al estado 
pendiente de transmitir */
;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1217(102,127))*/
(false):
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1193(80,135))*/
task {/*#E*/ 
contador := contador + 1;} 
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1190(145,135))*/
/* Se establece un 
contador  de ranuras que 
para simular la espera */
;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1187(85,155))*/
nextstate /*#E*/ 
Espera_Ranuras;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1202(45,120))*/
enddecision;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1175(90,200))*/
endstate;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1445(60,15))*/
connection /*#E*/ 
1 
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1481(110,15))*/
/* Comienza el algoritmo de Backoff */
:
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1277(55,35))*/
decision /*#E*/ 
n_rtx = 0;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1280(42,42))*/
(true):
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1274(35,50))*/
task {/*#E*/ 
k := 2;
backoff:=1;};
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1298(87,42))*/
(false):
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1259(65,50))*/
task {/*#E*/ 
k:= k * 2;
backoff:=backoff+1;};
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1277(55,35))*/
enddecision;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1271(35,65))*/
decision /*#E*/ 
backoff=N_nodos 
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1487(110,65))*/
/* backoff solo crece hasta (N_nodos-1),
para que K solo crezca hasta 2^(N_nodos-1) */
;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1286(27,72))*/
(true):
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1268(10,80))*/
task {/*#E*/ 
k:= k/2;
backoff:=backoff-1;};
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1295(67,77))*/
(false):
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1271(35,65))*/
enddecision;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1265(30,95))*/
task {/*#E*/ 
ranuras := RandInt(0,k-1, SEMILLA);
Tiem_Serv := Tiem_Serv + ranuras;
contador :=0;
} 
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1496(115,85))*/
/* Se calcula un numero de ranuras aleatorio, 
que son las que hay que esperar antes 
de mandar la intencion de transmitir */
;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1202(45,120))*/
join /*#E*/ 
grst0;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr(3),1445(60,15))*/
endconnection 1;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emisor.spr,4)*/
endprocess Emisor;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Usuario.spr,4)*/
process Usuario;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Usuario.spr(1),254(150,25))*/
DCL
exito Boolean;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Usuario.spr(1),275(150,40))*/
Timer T;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Usuario.spr(1),221(75,50))*/
start /*#E*/ 
 
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Usuario.spr(1),209(40,25))*/
/* El proceso usuario, en un periodo
de tiempo igual al de una RANURA, 
es capaz de generar una mensaje,
con probablidad PG.  */
;
grst1:
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Usuario.spr(1),230(60,90))*/
decision /*#E*/ 
Draw(PG,SEMILLA);
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Usuario.spr(1),239(42,97))*/
(true):
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Usuario.spr(1),236(30,120))*/
output /*#E*/ 
mensaje to parent;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Usuario.spr(1),242(30,140))*/
nextstate /*#E*/ 
espera_respuesta;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Usuario.spr(1),281(132,97))*/
(false):
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Usuario.spr(1),278(110,120))*/
/*#E*/ 
Set(now+RANURA,T);
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Usuario.spr(1),284(115,140))*/
nextstate /*#E*/ 
espera_timer;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Usuario.spr(1),230(60,90))*/
enddecision;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Usuario.spr(1),242(30,140))*/
state /*#E*/ 
espera_respuesta;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Usuario.spr(1),248(30,165))*/
input /*#E*/ 
respuesta(exito) 
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Usuario.spr(1),215(70,190))*/
/* Cuando el proceso Usuario genera un mensaje, 
 lo envia al proceso Emisor que lo creo (a su padre) ,
para que este lo envie al canal.

El proceso Usuario queda a la espera de una
respuesta, que puede ser true o false */
;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Usuario.spr(1),230(60,90))*/
join /*#E*/ 
grst1;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Usuario.spr(1),242(30,140))*/
endstate;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Usuario.spr(1),284(115,140))*/
state /*#E*/ 
espera_timer;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Usuario.spr(1),290(120,165))*/
input /*#E*/ 
T;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Usuario.spr(1),230(60,90))*/
join /*#E*/ 
grst1;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Usuario.spr(1),284(115,140))*/
endstate;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Usuario.spr,4)*/
endprocess Usuario;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Canal.spr,4)*/
process Canal;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Canal.spr(1),185(35,5))*/
NEWTYPE PidArray Array (Integer, Pid)
ENDNEWTYPE;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Canal.spr(1),212(150,10))*/
TIMER T;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Canal.spr(1),146(35,20))*/
DCL
Emisor_ID PidArray,
i integer := 1,
tx_sim integer := 0,
G integer := 0,
S integer := 0;

/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Canal.spr(1),179(10,155))*/
procedure Emitir_TICs referenced;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Canal.spr(1),194(10,170))*/
procedure Leer_Intencion referenced;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Canal.spr(1),209(10,185))*/
procedure Emitir_Colision referenced;

/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Canal.spr(1),341(180,25))*/
/* Instanciamos la señal T, 
del tipo TIMER, para que ocurra 
dentro de un tiempo (now+Ranura).    
Now es una variable de sistema 
que recoge el valor del tiempo 
actual en nuestro sistema. */

/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Canal.spr(1),158(70,50))*/
/* Creacion de instancias de proceso emisor.
El proceso Canal crea  'N_nodos' instancias   
del proceso Emisor y guarda el PID de 
cada proceso Emisoren Emisor_ID, 
que es un array de PID.

Cuando el proceso Canal emita una señal, 
debe indicar a que proceso va dirigida. 
La sintaxis es  "señal TO PID".
En nuestro caso sera "señal TO Emisor_ID(i)" */

/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Canal.spr(1),311(70,90))*/
/* offspring es una variable de 
sistema y contiene el valor 
del ultimo PID creado. 
El array Emisor_ID recoge
ese valor, para que no se pierda   */
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Canal.spr,4)*/
endprocess Canal;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emitir_TICs.spd,4)*/
procedure Emitir_TICs;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emitir_TICs.spd(1),116(85,15))*/
start /*#E*/ 
;
***** Unexpected end of flow *****
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emitir_TICs.spd,4)*/
endprocedure Emitir_TICs;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Leer_Intencion.spd,4)*/
procedure Leer_Intencion;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Leer_Intencion.spd(1),116(90,35))*/
start /*#E*/ 
;
***** Unexpected end of flow *****
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Leer_Intencion.spd,4)*/
endprocedure Leer_Intencion;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emitir_Colision.spd,4)*/
procedure Emitir_Colision;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emitir_Colision.spd(1),149(85,190))*/
return /*#E*/ 
;
/*#SDTREF(SDL,C:\Users\alumno\Aloha_n_procesos\Aloha_n_procesos\Emitir_Colision.spd,4)*/
endprocedure Emitir_Colision;
